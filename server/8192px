#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var ws = require('ws');
const ps = require('child_process');

const CONFIG = require(path.join('..', 'config.json'));
ps.exec('npm start')

const IMG_PATH = path.join(__dirname, '/canvas.png');

const Canvas = require('./Canvas');
const Client = require('./Client');
const Connection = require('./Connection');
const {
	colors,
	OPCODES
} = require('./utils');


// function is just for awaits
async function start() {
	let canvas = new Canvas();
	await canvas.load(fs.existsSync(IMG_PATH) ? IMG_PATH : null);

	setInterval(function () {
		let {
			heapTotal,
			heapUsed
		} = process.memoryUsage();
		console.log(`Memory total: ${heapTotal / 1024 / 1024}MB. Memory used: ${heapUsed / 1024 / 1024}MB.`);
		console.log(`Canvas size: ${canvas.width}x${canvas.height}`);
		console.log('-------------------------')
	}, 10000)

	let clients = {};
	let connections = [];
	let socket = ws.createServer({
		port: 3939
	});
	socket.on('connection', function (_connection) {
		var id = _connection.upgradeReq.headers['x-forwarded-for'];
		if (id == null) {
			id = _connection.upgradeReq.socket.remoteAddress;
		}
		console.log(id)

		const connection = new Connection(_connection, clients[id] = clients[id] || new Client(id));

		if (connection.session.cooldown > Date.now()) {
			connection.sendCooldown(connection.session.cooldown)
		}
		connections.push(connection);
		connection.sendOnline(connections.length);

		connection.ping();
		
		connection.sendBoard(canvas);

		connection.socket.on('message', function (data, flags) {
			if (flags.binary) {
				let dv = new DataView(data.buffer, data.byteOffset, data.byteLength);
				switch (dv.getUint8(0)) {
					case OPCODES.PIXEL: {
						if (connection.session.cooldown > Date.now()) return

						let x = dv.getUint16(1);
						let y = dv.getUint16(3);

						if (x >= canvas.width || y >= canvas.height || x < 0 || y < 0) {
							return;
						}

						const colorId = dv.getUint8(5);
						if (colorId < 0 || colorId >= colors.length) return;

						canvas.setPixel(x, y, colorId);

						connections.forEach(function (connection) {
							try {
								connection.socket.send(data);
							} catch (error) {
								console.error(error);
							}
						});

						var factor = Math.sin((x * 0.5) + (y * 0.5));
						var duration = Math.abs(factor) * 8192 * Math.min(100, connections.length / 100);

						if (connection.session.isAdmin) {
							connection.session.cooldown = 0;
						} else {
							connection.session.cooldown = Date.now() + Math.max(CONFIG.cooldown * 1000, Math.floor(duration));
						}

						connection.sendCooldown(connection.session.cooldown)
						break
					}
					case OPCODES.PING: {
						console.log('Got ping')
						connection.lastPong = Date.now();
						connection.pingTimeout = setTimeout(connection.ping.bind(connection), 25000);

						break
					}
				}
			} else {
				console.log('Text message: ' + data)
				connection.session.isAdmin = true;
			}
		});

		connection.socket.on('close', function () {
			clearTimeout(connection.pingTimeout);
			connections.splice(connections.indexOf(connection), 1);
		});
	});

	setInterval(() => {
		// slice because after 'close' event array original will mutate
		connections.slice().forEach(conn => {
			if ((Date.now() - conn.lastPong) > 30000) {
				conn.socket.close();
			}
		});

		connections.forEach(conn => {
			conn.sendOnline(connections.length);
		});
	}, 30000);

	setTimeout(function callback(then, cooldown, delay) {
		var now = Date.now();
		var time = now - then;

		if (connections.length > 0) {
			cooldown -= time;
		}

		if (cooldown <= 0) {
			cooldown = cooldown + delay;

			canvas.expand(CONFIG.expandSize);

			connections.forEach(function (connection) {
				connection.sendBoard(canvas);
			});
		}

		canvas.save(IMG_PATH).then(function () {
			setTimeout(callback, CONFIG.expandRate * 1000, now, cooldown, delay);
		})
	}, 0, Date.now(), CONFIG.expandRate * 1000, CONFIG.expandRate * 1000);
}
start();